# Docker Compose configuration for Cloud API in a VPC environment
# This setup includes the dstack-service for VPC management and an init container
# to prepare necessary configuration files before starting the Cloud API service.

services:
  dstack-service:
    image: endnearai/dstack-service@sha256:9f10a9979086e06a99ae2930ac06631a4a7f5cb0eb0290c59b81407b158c2f0b
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/run/dstack.sock:/var/run/dstack.sock
    environment:
      - VPC_NODE_NAME=cloud-api
      - VPC_SERVER_APP_ID=${VPC_SERVER_APP_ID}
    healthcheck:
      test: ["CMD-SHELL", "test -S /var/run/dstack.sock || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 10
      start_period: 10s

  # Init container to prepare configuration
  api-init:
    image: alpine@sha256:4b7ce07002c69e8f3d704a9c5d6fd3053be500b7f1c69fc0d80990c2ad8dd412
    container_name: api-init
    restart: "no"
    volumes:
      - api_config:/config
    configs:
      - source: api_init_script
        target: /init.sh
        mode: 0755
    command: ["/init.sh"]
    depends_on:
      dstack-service:
        condition: service_healthy

  # Cloud API service
  cloud-api:
    image: endnearai/cloud-api@sha256:f18e7d750c324b1d3b4873d7a49d50a41a526235d7f969f7fbc72575707ebd39
    restart: unless-stopped
    volumes:
      - /var/run/dstack.sock:/var/run/dstack.sock
      - api_config:/config:ro
    environment:
      - POSTGRES_PRIMARY_APP_ID=${POSTGRES_PRIMARY_APP_ID}
      - VPC_SERVER_APP_ID=${VPC_SERVER_APP_ID}
      - SERVER_HOST=${SERVER_HOST}
      - SERVER_PORT=${SERVER_PORT}
      - DATABASE_MAX_CONNECTIONS=${DATABASE_MAX_CONNECTIONS}
      - DATABASE_REFRESH_INTERVAL=${DATABASE_REFRESH_INTERVAL}
      - MODEL_DISCOVERY_SERVER_URL=${MODEL_DISCOVERY_SERVER_URL}
      - MODEL_DISCOVERY_API_KEY=${MODEL_DISCOVERY_API_KEY}
      - MODEL_DISCOVERY_REFRESH_INTERVAL=${MODEL_DISCOVERY_REFRESH_INTERVAL}
      - MODEL_DISCOVERY_TIMEOUT=${MODEL_DISCOVERY_TIMEOUT}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - RUST_LOG=${RUST_LOG}
      - RUST_BACKTRACE=${RUST_BACKTRACE}
      - LOG_MODULE_API=${LOG_MODULE_API}
      - LOG_MODULE_SERVICES=${LOG_MODULE_SERVICES}
      - DSTACK_CLIENT_URL=${DSTACK_CLIENT_URL}
      - AUTH_MOCK=${AUTH_MOCK}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GITHUB_REDIRECT_URL=${GITHUB_REDIRECT_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URL=${GOOGLE_REDIRECT_URL}
      - AUTH_ADMIN_DOMAINS=${AUTH_ADMIN_DOMAINS}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_MAX_CONNECTIONS=${DATABASE_MAX_CONNECTIONS}
      - DATABASE_TLS_ENABLED=${DATABASE_TLS_ENABLED}
      - DATABASE_PASSWORD_FILE=${DATABASE_PASSWORD_FILE}
    dns:
      - 100.100.100.100
    dns_search:
      - dstack.internal
    ports:
      - "3000:3000"
    depends_on:
      api-init:
        condition: service_completed_successfully
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:3000/v1/model/list || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 40s

  # Dstack Ingress container for custom domain
  dstack-ingress:
    image: robortyan/dstack-ingress@sha256:e46aba89a180c6e2e8a42a5df771dd65a6b73ecb107791e35aa4f3c3a48d896b
    ports:
      - "444:444"
    environment:
      - PORT=444
      - DOMAIN=${NEAR_AI_CLOUD_API_DOMAIN}
      - TARGET_ENDPOINT=http://cloud-api:3000
      - DNS_PROVIDER=cloudflare
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - GATEWAY_DOMAIN=gateway.cvm1.near.ai
      - CERTBOT_EMAIL=${CERTBOT_EMAIL}
      - TXT_PREFIX=_dstack-app-address
      - SET_CAA=true
    volumes:
      - /var/run/dstack.sock:/var/run/dstack.sock
      - /var/run/tappd.sock:/var/run/tappd.sock
      - cert-data:/etc/letsencrypt
    restart: unless-stopped
    depends_on:
      cloud-api:
        condition: service_started

volumes:
  api_config:
  cert-data: # Persistent volume for certificates

configs:
  api_init_script:
    content: |
      #!/bin/sh
      set -e

      echo "Cloud API initialization starting..."

      # Wait for VPC service to be ready
      echo "Waiting for VPC service..."
      while ! wget -q -O - http://dstack-service/vpc/0/shared_key >/dev/null 2>&1; do
        echo "  Waiting for dstack-service..."
        sleep 2
      done

      echo "Fetching shared key..."
      wget -q -O /config/keyfile http://dstack-service/vpc/0/shared_key

      # Derive PostgreSQL password from keyfile (same algorithm as Patroni)
      POSTGRES_PASSWORD=$$(head -c 32 /config/keyfile | base64 | tr -d "\n")
      echo "$$POSTGRES_PASSWORD" > /config/postgres-password
      chmod 644 /config/postgres-password

      echo "Initialization complete"
